{"version":3,"sources":["images/play_icon.png","config.js","video/singleVideo.js","video/suggestions.js","video/index.js","component/footer.js","component/App.js","serviceWorker.js","index.js"],"names":["module","exports","apiKey","detail","width","height","src","id","frameBorder","allow","allowFullScreen","className","title","description","videoList","changeSelection","selectedVideoId","length","map","data","onClick","changeSelectedVideo","thumbnails","medium","url","alt","style","paddingLeft","channel","youtube","YouTube","config","searchString","useState","setVideoList","selectedVideo","setSelectedVideo","useEffect","callApi","a","searchVideos","result","overflow","videoDetail","App","searchTerm","setSearchTerm","passToChild","setPassToChild","img_1","type","placeholder","onChange","event","target","value","variant","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d710f85d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play_icon.2f37b260.png\";","module.exports ={\r\n    apiKey:'AIzaSyCegqZE7F0G1mKaPgisow98hEWpX_1c-74',\r\n}","import React from 'react';\r\n\r\nexport default ({detail}) =>{\r\n return(\r\n     <>\r\n     {detail ?(\r\n        <div>\r\n            <div>\r\n                <iframe width=\"100%\" height=\"315\" \r\n                src={`https://www.youtube.com/embed/${detail.id}`}\r\n                frameBorder=\"0\" \r\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \r\n                allowFullScreen>\r\n                </iframe>\r\n            </div>\r\n            <div >\r\n                <div className='signleVideoTitle'><h3>{detail.title}</h3></div>\r\n                <div className='signleVideoTitle'>{detail.description}</div>\r\n            </div>\r\n        </div>\r\n        ) : <div className='no_vid'>No Videos Found For Your Search</div>}\r\n    </>\r\n )   \r\n}\r\n","import React from 'react';\r\n\r\nexport default ({videoList, changeSelection, selectedVideoId}) =>{\r\n\r\n    const changeSelectedVideo = (data) =>{\r\n        changeSelection(data)\r\n        \r\n    }\r\n return(\r\n     <>\r\n    <div>\r\n    {videoList.length > 0 && (\r\n        videoList.map(data => {\r\n            if(data.id !== selectedVideoId){\r\n        return(\r\n        <div className='list-group-item'\r\n        onClick={()=>changeSelectedVideo(data) } className='videoList' key={data.id} >\r\n        <div>\r\n            <img src = {data.thumbnails.medium.url} height='80px'alt='video suggestion' />\r\n        </div>\r\n        <div style={{paddingLeft:'10px'}}>\r\n            <div className='sugg-title' ><h5>{data.title}</h5></div>\r\n            <div className='sugg-channel'>{data.channel.title}</div>\r\n        </div>\r\n        {/* {data.title} */}\r\n\r\n        </div>\r\n            )}\r\n            \r\n        })\r\n    )}\r\n        \r\n    </div>\r\n    </>\r\n )   \r\n}\r\n// export default Video;","import React, {useEffect, useState} from 'react';\r\nimport SingleVideo from './singleVideo';\r\nimport Suggestions from './suggestions';\r\nimport YouTube from 'simple-youtube-api';\r\nimport config from './../config';\r\n\r\n\r\nconst youtube = new YouTube(config.apiKey);\r\nexport default ({searchString}) =>{\r\n\r\nconst [videoList, setVideoList] = useState([]);\r\nconst [selectedVideo, setSelectedVideo] = useState({});\r\n\r\nuseEffect(()=>{\r\n    callApi()\r\n}, [searchString]);\r\n\r\nconst callApi = async ()=>{\r\n    const result = await youtube.searchVideos(searchString, 10)\r\n    setSelectedVideo(result[0]);\r\n    setVideoList(result);\r\n    \r\n}\r\nconst setSelectedVideoCallback=(videoDetail)=>{\r\nsetSelectedVideo(videoDetail);\r\n}\r\n return(\r\n     <>\r\n    <div className='col-xs-12 col-sm-12 col-lg-8'>\r\n    {/* {selectedVideo.title ? selectedVideo.title : 'Loading...'} */}\r\n        <SingleVideo detail={selectedVideo}/>\r\n    </div>\r\n    <div className='col-xs-12 col-sm-12 col-lg-4' style={{ height:'80vh'}}>\r\n       { videoList.length > 0 ? <h5>Video suggestions</h5> : <h5> </h5> } \r\n        <div style={{ overflow:'auto', height: '40vh'}}>\r\n        <Suggestions videoList={videoList} changeSelection={setSelectedVideoCallback} selectedVideoId={selectedVideo.id}/>\r\n        </div>\r\n    </div> \r\n    </>\r\n )   \r\n}\r\n// export default Video;\r\n","import React from 'react';\r\n\r\nexport default () =>{\r\n    return(\r\n        <div className = 'footer'>\r\n            Designed by <span className='smart_pages'>Smart Pages</span>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\n// import { Button } from 'react-bootstrap';\nimport img_1 from '../images/play_icon.png';\nimport Video from '../video/index';\nimport Footer from './footer';\n\nfunction App() {\n\nconst [searchTerm, setSearchTerm] = useState([]);\nconst [passToChild, setPassToChild] = useState([]);\n\n  return (\n    <>\n<div className ='container' >\n     <div className='logo'><img className='logo_img' src = {img_1} alt='Smart Play Logo'/> <div className='smart_tube'> Smart Tube</div></div>\n  <div className='row'>\n      <input \n      className ='col-sm-10 col-xs-10 col-lg-10 form-control' \n      type=\"text\" placeholder=\"Search videos here...\" \n      onChange = {event=> setSearchTerm(event.target.value) }/>\n      <button \n      className='col-sm-2 col-xs-2 col-lg-2 btn btn-primary' \n      variant=\"primary\" size=\"lg\" onClick = {()=>setPassToChild(searchTerm)}>Search</button>\n  </div><br/>\n  <div className='row'>\n  <Video  searchString = {passToChild}/>\n  </div>\n</div>\n<Footer />\n</>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}